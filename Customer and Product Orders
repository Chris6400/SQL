Introduction:

The purpose of this report is to present an analysis of a sample database and its associated data. The database includes three tables: products, customers, and orders.
The products table contains information about the products sold by the store, including their name, category, price, and quantity in stock. 
The customers table contains information about the store's customers, including their name, email address, and customer ID. The orders table contains information 
about the orders placed by customers, including the customer ID, product ID, quantity ordered, and order date.

Purpose of Analysis:

The purpose of this analysis is to gain insights into the store's sales and customer behavior.
We will be answering a set of questions to achieve this goal.
Questions to be Answered:

Which products are in the "Laptops" category?
What are the names and prices of all products that are currently in stock?
What are the names and email addresses of all customers?
How many orders have been placed?
What are the names and order dates of all customers who have placed an order?
What is the total revenue generated by the store?
What are the top 3 best-selling products by quantity?
Who are the top 3 customers who have spent the most money?
What is the total revenue generated by each product category?
How many orders have been placed by month?






CREATE TABLE products (
  product_id INT PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  category VARCHAR(50) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  in_stock BOOLEAN NOT NULL
);

CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  email VARCHAR(50) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  address VARCHAR(100) NOT NULL
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  order_date DATE NOT NULL,
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);


INSERT INTO products (product_id, name, category, price, in_stock)
VALUES
  (1, 'Apple MacBook Pro', 'Laptops', 1999.99, true),
  (2, 'Samsung Galaxy S21', 'Smartphones', 899.99, true),
  (3, 'Bose QuietComfort 35 II', 'Headphones', 299.99, false),
  (4, 'Sony PlayStation 5', 'Gaming Consoles', 499.99, false),
  (5, 'Logitech MX Master 3', 'Computer Accessories', 99.99, true);

-- Example data for the customers table
INSERT INTO customers (customer_id, name, email, phone, address)
VALUES
  (1, 'John Smith', 'john.smith@example.com', '555-1234', '123 Main St, Anytown USA'),
  (2, 'Jane Doe', 'jane.doe@example.com', '555-5678', '456 Oak Ave, Anytown USA'),
  (3, 'Bob Johnson', 'bob.johnson@example.com', '555-9012', '789 Elm St, Anytown USA');

-- Example data for the orders table
INSERT INTO orders (order_id, customer_id, product_id, quantity, order_date)
VALUES
  (1, 1, 1, 1, '2022-01-01'),
  (2, 1, 2, 2, '2022-01-05'),
  (3, 2, 3, 1, '2022-01-10'),
  (4, 3, 5, 3, '2022-01-15'),
  (5, 2, 4, 1, '2022-01-20');
  
  
  
1. Show all the products in the "Laptops" category.
  
  SELECT *
FROM products
WHERE category = 'Laptops';


2. Show the names and prices of all products that are currently in stock.]
  
  SELECT name, price
FROM products
WHERE in_stock = true;


3. Show the names and email addresses of all customers.

SELECT name, email
FROM customers;


4. Show the total number of orders that have been placed.

SELECT COUNT(*)
FROM orders;


5. Show the names and order dates of all customers who have placed an order.

SELECT c.name, o.order_date
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id;


6. Show the total revenue generated by the store.

SELECT SUM(p.price * o.quantity)
FROM products p
INNER JOIN orders o ON p.product_id = o.product_id;


7. Show the top 3 best-selling products by quantity.

SELECT p.name, SUM(o.quantity) as total_quantity
FROM products p
INNER JOIN orders o ON p.product_id = o.product_id
GROUP BY p.name
ORDER BY total_quantity DESC
LIMIT 3;

8. Show the top 3 customers who have spent the most money.

SELECT c.name, SUM(p.price * o.quantity) as total_spent
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN products p ON o.product_id = p.product_id
GROUP BY c.name
ORDER BY total_spent DESC
LIMIT 3;


9. Show the total revenue generated by each product category.
SELECT p.category, SUM(p.price * o.quantity) as total_revenue
FROM products p
INNER JOIN orders o ON p.product_id = o.product_id
GROUP BY p.category;


10. Show the number of orders placed by month.

SELECT DATE_TRUNC('month', order_date) as month, COUNT(*) as num_orders
FROM orders
GROUP BY month
ORDER BY month ASC;

Conclusion:

Through this analysis, we were able to gain valuable insights into the store's sales and customer behavior. We were able to identify 
the top-selling products, the most valuable customers, and the revenue generated by each product category. These insights can be used to inform
marketing and sales strategies and improve the store's overall performance.


